{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/yurastriuchkov/Sites/fin/client/src/app/pets/%5Bid%5D/page.tsx"],"sourcesContent":["'use client';\n\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'next/navigation';\nimport Link from 'next/link';\n\n// Define TypeScript interface for Pet and Owner\ninterface Owner {\n  _id: string;\n  name: string;\n}\n\ninterface Pet {\n  _id: string;\n  name: string;\n  species: string;\n  owners: Owner[] | string[]; // Can be array of objects or IDs\n}\n\n// Use environment variable for API base URL\nconst API_BASE_URL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:5002';\n\nexport default function PetPage() {\n  const { id } = useParams();\n  const [pet, setPet] = useState<Pet | null>(null);\n\n  useEffect(() => {\n    fetch(`${API_BASE_URL}/api/pets/${id}`)\n      .then((res) => {\n        if (!res.ok) throw new Error('Failed to fetch pet');\n        return res.json();\n      })\n      .then((data) => setPet(data))\n      .catch((error) => console.error('Error fetching pet:', error));\n  }, [id]);\n\n  if (!pet) return <p className=\"p-4\">Loading...</p>;\n\n  return (\n    <div className=\"p-4\">\n      <h1 className=\"text-2xl font-bold\">{pet.name}</h1>\n      <p className=\"text-gray-600\">{pet.species}</p>\n      <p className=\"text-blue-500\">{pet._id}</p>\n      <div className=\"mt-4\">\n        <h2 className=\"text-lg font-semibold\">Owners:</h2>\n        {pet.owners && pet.owners.length > 0 ? (\n          <ul className=\"mt-2 space-y-2\">\n            {pet.owners.map((owner) => (\n              <li key={typeof owner === 'string' ? owner : owner._id}>\n                <Link\n                  href={`/users/${typeof owner === 'string' ? owner : owner._id}`}\n                  className=\"font-bold text-blue-500 hover:underline\"\n                >\n                  {typeof owner === 'string' ? 'Unknown' : owner.name || 'Unknown'}\n                </Link>\n                <br />\n                <span className=\"text-blue-500\">\n                  {typeof owner === 'string' ? owner : owner._id}\n                </span>\n              </li>\n            ))}\n          </ul>\n        ) : (\n          <p className=\"text-sm\">No owners assigned.</p>\n        )}\n      </div>\n    </div>\n  );\n}"],"names":[],"mappings":";;;AAoBqB;;AAlBrB;AACA;AACA;;;AAJA;;;;AAmBA,4CAA4C;AAC5C,MAAM,eAAe,6DAAmC;AAEzC,SAAS;;IACtB,MAAM,EAAE,EAAE,EAAE,GAAG,CAAA,GAAA,qIAAA,CAAA,YAAS,AAAD;IACvB,MAAM,CAAC,KAAK,OAAO,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAc;IAE3C,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;6BAAE;YACR,MAAM,GAAG,aAAa,UAAU,EAAE,IAAI,EACnC,IAAI;qCAAC,CAAC;oBACL,IAAI,CAAC,IAAI,EAAE,EAAE,MAAM,IAAI,MAAM;oBAC7B,OAAO,IAAI,IAAI;gBACjB;oCACC,IAAI;qCAAC,CAAC,OAAS,OAAO;oCACtB,KAAK;qCAAC,CAAC,QAAU,QAAQ,KAAK,CAAC,uBAAuB;;QAC3D;4BAAG;QAAC;KAAG;IAEP,IAAI,CAAC,KAAK,qBAAO,6LAAC;QAAE,WAAU;kBAAM;;;;;;IAEpC,qBACE,6LAAC;QAAI,WAAU;;0BACb,6LAAC;gBAAG,WAAU;0BAAsB,IAAI,IAAI;;;;;;0BAC5C,6LAAC;gBAAE,WAAU;0BAAiB,IAAI,OAAO;;;;;;0BACzC,6LAAC;gBAAE,WAAU;0BAAiB,IAAI,GAAG;;;;;;0BACrC,6LAAC;gBAAI,WAAU;;kCACb,6LAAC;wBAAG,WAAU;kCAAwB;;;;;;oBACrC,IAAI,MAAM,IAAI,IAAI,MAAM,CAAC,MAAM,GAAG,kBACjC,6LAAC;wBAAG,WAAU;kCACX,IAAI,MAAM,CAAC,GAAG,CAAC,CAAC,sBACf,6LAAC;;kDACC,6LAAC,+JAAA,CAAA,UAAI;wCACH,MAAM,CAAC,OAAO,EAAE,OAAO,UAAU,WAAW,QAAQ,MAAM,GAAG,EAAE;wCAC/D,WAAU;kDAET,OAAO,UAAU,WAAW,YAAY,MAAM,IAAI,IAAI;;;;;;kDAEzD,6LAAC;;;;;kDACD,6LAAC;wCAAK,WAAU;kDACb,OAAO,UAAU,WAAW,QAAQ,MAAM,GAAG;;;;;;;+BATzC,OAAO,UAAU,WAAW,QAAQ,MAAM,GAAG;;;;;;;;;6CAe1D,6LAAC;wBAAE,WAAU;kCAAU;;;;;;;;;;;;;;;;;;AAKjC;GA9CwB;;QACP,qIAAA,CAAA,YAAS;;;KADF","debugId":null}}]
}